// ReSharper disable RedundantNameQualifier
using System.Data;
using Dapper;

namespace <#= @namespace #>;

<#
    var typeMapping = new Dictionary<Type, DbType>
    {
        {typeof(short), DbType.Int16},
        {typeof(int), DbType.Int32},
        {typeof(float), DbType.Double},
        {typeof(double), DbType.Double},
        {typeof(decimal), DbType.Decimal},
        {typeof(DateTime), DbType.DateTime},
    };

	foreach (var type in types)
	{
#>
public class <#= type.UnitName #>TypeHandler : SqlMapper.TypeHandler<<#= type.UnitName #>>
{
    public override void SetValue(IDbDataParameter parameter, <#= type.UnitName #> value)
    {
        parameter.DbType = DbType.<#= typeMapping[type.UnitType] #>;
        parameter.Value = value.AsPrimitive();
    }

    public override <#= type.UnitName #> Parse(object value)
    {
        return new <#= type.UnitName #>((<#= type.UnitType #>)value);
    }
}

<#
	}
#>

public static class TypeHandlerInitializer
{
    public static void Initialize()
    {
<#
    foreach (var type in types)
	{
#>
        SqlMapper.AddTypeHandler(new <#= type.UnitName #>TypeHandler());
<#
    }
#>
    }
}
